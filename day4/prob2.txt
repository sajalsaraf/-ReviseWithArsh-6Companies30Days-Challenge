class Solution {
public: // multi-source bfs
    vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    vector<vector<int>> highestPeak(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>ans(m,vector<int>(n,-1));
        queue<pair<int, int>> q;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    q.push({i, j});
                    ans[i][j] = 0;
                }
            }
        }

        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();

            for(auto &d : dir){
                int r = d[0]+row;
                int c = d[1]+col;
                if(r>=0 and c>=0 and r<m and c<n){
                    if(ans[r][c] == -1){
                        q.push({r,c});
                        ans[r][c] = ans[row][col]+1;
                    }
                }
            } 
        }
        return ans;
    }
};